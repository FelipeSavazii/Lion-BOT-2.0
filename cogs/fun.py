import discord
from discord import app_commands, ui
from discord.ext import commands
from datetime import datetime
import asyncio
import random

# JOKENPO CLASS
class Jokenpo(discord.ui.Select):
    def __init__(self, interaction, bot):
        self.interaction = interaction
        self.bot = bot
        options = [
            discord.SelectOption(label='Pedra', description='Jogue com pedra.', emoji='ü™®'),
            discord.SelectOption(label='Papel', description='Jogue com papel.', emoji='üìÑ'),
            discord.SelectOption(label='Tesoura', description='Jogue com tesoura.', emoji='‚úÇÔ∏è'),
        ]
        super().__init__(placeholder='Selecione uma op√ß√£o.', min_values=1, max_values=1, options=options)
      
    async def callback(self, interaction: discord.Interaction):
        await self.interaction.delete_original_response()
      
        embed = discord.Embed(
          description=f"JO!",
          color=0x7900ff,
        )
        embed.set_footer(text=f"Executado por {interaction.user.display_name}.")
        embed.set_author(name="Jokenp√¥ - Lion BOT", icon_url=self.bot.user.avatar.url)
        embed.set_image(url="https://www.kapo.com.br/images/gifs/games/desk/hora-do-jogo/jokempo-pedra-papel-e-tesoura.gif")
        await interaction.response.send_message(embed=embed)
        await asyncio.sleep(1.5)
      
        embed.description = f"KEN!"
        await interaction.edit_original_response(embed=embed)
        await asyncio.sleep(1.5)
      
        embed.description = f"P√î!"
        await interaction.edit_original_response(embed=embed)
        await asyncio.sleep(1.5)
      
        result = random.choice(['pedra', 'papel', 'tesoura'])
      
        if self.values[0] == 'Pedra':
          if result == 'pedra':
            final_result = '`empate`.'
          elif result == 'papel':
            final_result = '`voc√™ perdeu`!'
          elif result == 'tesoura':
            final_result = '`voc√™ venceu`!'
      
        elif self.values[0] == 'Papel':
          if result == 'pedra':
            final_result = '`voc√™ venceu`!'
          elif result == 'papel':
            final_result = '`empate`.'
          elif result == 'tesoura':
            final_result = '`voc√™ perdeu`!'
            
        elif self.values[0] == 'Tesoura':
          if result == 'pedra':
            final_result = '`voc√™ perdeu`!'
          elif result == 'papel':
            final_result = '`voc√™ ganhou`!'
          elif result == 'tesoura':
            final_result = '`empate`.'
            
        embed.description = f"Resultado: {final_result}\n- Voc√™ escolheu: **{self.values[0].lower()}**.\n- O BOT escolheu: **{result}**."
        await interaction.edit_original_response(embed=embed)


class JokenpoView(discord.ui.View):
  def __init__(self, interaction, bot):
      super().__init__()

      self.add_item(Jokenpo(interaction, bot))

class Fun(commands.Cog, name="fun"):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(
        name="dado",
        description="Gire um dado e obtenha um resultado aleat√≥rio.",
    )
    async def dado(self, interaction: discord.Interaction):
        embed = discord.Embed(
            description=f"Girando dado...",
            color=0x7900ff,
        )
        embed.set_footer(text=f"Executado por {interaction.user.display_name}.")
        embed.set_author(name="Dado - Lion BOT", icon_url=self.bot.user.avatar.url)
        embed.set_image(url="https://media.tenor.com/i_L5KauoCcoAAAAi/dice.gif")
        await interaction.response.send_message(embed=embed)
        await asyncio.sleep(1.0)
        embed.description = f"Resultado: `{random.randint(1, 6)}`."
        await interaction.edit_original_response(embed=embed)

    @app_commands.command(
      name="jokenp√¥",
      description="Jogue jokenpo contra mim! Duvido que consiga ganhar :)",
      #aliases=["jokenpo", "ppt", "pedrapapeltesoura"]
    )
    async def jokenpo(self, interaction: discord.Interaction):
      embed = discord.Embed(
          description=f"Vamos come√ßar...",
          color=0x7900ff,
      )
      embed.set_footer(text=f"Executado por {interaction.user.display_name}.")
      embed.set_author(name="Jokenp√¥ - Lion BOT", icon_url=self.bot.user.avatar.url)
      embed.set_image(url="https://www.kapo.com.br/images/gifs/games/desk/hora-do-jogo/jokempo-pedra-papel-e-tesoura.gif")
      await interaction.response.send_message(embed=embed, view=JokenpoView(interaction, self.bot))

    @app_commands.command(
      name="roleta",
      description="Com a roleta, posso te ajudar a decidir entre algumas op√ß√µes.",
    )
    async def jokenpo(self, interaction: discord.Interaction, op√ß√£o1: str, op√ß√£o2: str, op√ß√£o3: str = None, op√ß√£o4: str = None, op√ß√£o5: str = None, op√ß√£o6: str = None, op√ß√£o7: str = None, op√ß√£o8: str = None):
      options = [op√ß√£o1, op√ß√£o2]
      options_to_text  = [f"- {op√ß√£o1}\n", f"- {op√ß√£o2}\n"]
      if op√ß√£o3:
        options.append(op√ß√£o3)
        options_to_text.append(f"- {op√ß√£o3}\n")
      if op√ß√£o4:
        options.append(op√ß√£o4)
        options_to_text.append(f"- {op√ß√£o4}\n")
      if op√ß√£o5:
        options.append(op√ß√£o5)
        options_to_text.append(f"- {op√ß√£o5}\n")
      if op√ß√£o6:
        options.append(op√ß√£o6)
        options_to_text.append(f"- {op√ß√£o6}\n")
      if op√ß√£o7:
        options.append(op√ß√£o7)
        options_to_text.append(f"- {op√ß√£o7}\n")
      if op√ß√£o8:
        options.append(op√ß√£o8)
        options_to_text.append(f"- {op√ß√£o8}\n")

      options_text = ''.join(options_to_text)
      
      embed = discord.Embed(
          description=f"Vou sortear...",
          color=0x7900ff,
      )
      embed.set_footer(text=f"Executado por {interaction.user.display_name}.")
      embed.set_author(name="Roleta - Lion BOT", icon_url=self.bot.user.avatar.url)
      await interaction.response.send_message(embed=embed)
      await asyncio.sleep(1.0)
      embed.description = f"Op√ß√µes recebidas:\n{options_text}\nResultado: `{random.choice(options)}`."
      await interaction.edit_original_response(embed=embed)

async def setup(bot):
    await bot.add_cog(Fun(bot))